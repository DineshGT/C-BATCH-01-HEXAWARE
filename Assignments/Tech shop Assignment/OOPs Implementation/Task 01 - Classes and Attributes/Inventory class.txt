public class Inventory_class
{
    //Attributes

    public int inventory_id { get; set; }
    public Product_class _product { get; set; }
    public int quantity_in_stock { get; set; }
    public DateTime last_stock_update { get; set; }

    // Parameterized constructor

    public Inventory_class(int inventory_id, Product_class _product, int quantity_in_stock)
    {
        this.inventory_id = inventory_id;
        this._product = _product;
        this.quantity_in_stock = quantity_in_stock;
        last_stock_update = DateTime.Now;
    }

    //Methods
    //A method to retrieve the product associated with this inventory item.
    public void GetProduct()
    {
        return Product;
    }

    //A method to get the current quantity of the product in stock.
    public void GetQuantityInStock()
    {
        return QuantityInStock;
    }

    //A method to add a specified quantity of the product to the inventory.
    public void AddToInventory(int quantity)
    {
        if (quantity <= 0)
        {
            Console.WriteLine("Invalid quantity to add. Must be greater than zero.");
            return;
        }
        quantity_in_stock += quantity;
        last_stock_update = DateTime.Now;
        Console.WriteLine($"Added {quantity} units. New stock: {quantity_in_stock}");
    }

    //A method to remove a specified quantity of the product
    public bool RemoveFromInventory(int quantity)
    {
        if (quantity <= 0)
        {
            Console.WriteLine("Invalid quantity to remove.");
            return false;
        }
        if (quantity > quantity_in_stock)
        {
            Console.WriteLine("Insufficient stock!");
            return false;
        }
        quantity_in_stock -= quantity;
        last_stock_update = DateTime.Now;
        Console.WriteLine($"Removed {quantity} units. Remaining stock: {quantity_in_stock}");
        return true;
    }

    //A method to update the stock quantity to a new value
    public void UpdateStockQuantity(int newQuantity)
    {
        if (newQuantity < 0)
        {
            Console.WriteLine("Stock quantity cannot be negative.");
            return;
        }
        quantity_in_stock = newQuantity;
        last_stock_update = DateTime.Now;
        Console.WriteLine($"Stock updated to {quantity_in_stock}");
    }

    //A method to check if a specified quantity of the product is available
    public bool IsProductAvailable(int quantityToCheck)
    {
        return quantity_in_stock >= quantityToCheck;
    }

    //A method to calculate the total value of the products in the inventory based on their prices and quantities.
    public double GetInventoryValue()
    {
        return quantity_in_stock * _product.product_price;
    }

    //: A method to list products with quantities below a specified threshold, indicating low stock.
    public bool ListLowStockProducts(int threshold)
    {
        return quantity_in_stock < threshold;
    }

    // A method to list products that are out of stock.
    public bool ListOutOfStockProducts()
    {
        return quantity_in_stock == 0;
    }

    // A method to list all products in the inventory, along with their quantities
    public void ListAllProducts()
    {

    }

}  